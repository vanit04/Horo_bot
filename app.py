import streamlit as st
import httpx
import json
from datetime import datetime
import time

st.set_page_config(page_title="‡πÇ‡∏´‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πì ‡∏†‡∏û (Gemini)", page_icon="üîÆ", layout="centered")
st.title("üîÆ ‡πÇ‡∏´‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πì ‡∏†‡∏û (Streamlit + Gemini 2.5)")
st.markdown("‡∏ú‡∏™‡∏≤‡∏ô‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢ ‡∏™‡∏≤‡∏Å‡∏• ‡πÅ‡∏•‡∏∞‡∏à‡∏µ‡∏ô ‚Äî ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Google Gemini 2.5 Flash")

# Load API key from Streamlit secrets
GEMINI_API_KEY = st.secrets.get("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    st.error(
        "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ `GEMINI_API_KEY` ‡πÉ‡∏ô Streamlit Secrets.\n"
        "‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà App ‚Üí Settings ‚Üí Secrets ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°:\n\n"
        "GEMINI_API_KEY = "YOUR_GOOGLE_GEMINI_API_KEY"\n\n"
        "‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Rerun"
    )
    st.stop()

# Config: model
MODEL = "gemini-2.5-flash"
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL}:generateContent?key={GEMINI_API_KEY}"

# Utility: call Gemini with retries and robust parsing
async def _call_gemini_async(payload, max_retries=3):
    timeout = httpx.Timeout(60.0, connect=15.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        delay = 2
        for attempt in range(max_retries):
            try:
                r = await client.post(GEMINI_URL, json=payload)
                # Try to parse JSON even on non-200 to show details
                try:
                    parsed = r.json()
                except Exception:
                    parsed = {"raw_text": r.text, "status_code": r.status_code}

                if r.status_code == 200:
                    # expected shape: { "candidates": [ { "content": { "parts": [ { "text": "..." } ] } } ] }
                    return {"ok": True, "resp": parsed}
                else:
                    # expose API error message
                    return {"ok": False, "resp": parsed, "status": r.status_code}

            except httpx.RequestError as e:
                if attempt < max_retries - 1:
                    time.sleep(delay)
                    delay *= 2
                    continue
                return {"ok": False, "error": str(e)}
            except Exception as e:
                return {"ok": False, "error": str(e)}

def call_gemini(prompt, system_prompt):
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
        # enable Google search tool only if available in your Gemini settings
        "tools": [{"google_search": {}}]
    }
    # Call async from sync Streamlit
    import asyncio
    result = asyncio.run(_call_gemini_async(payload))

    if not result.get("ok"):
        # show diagnostic info in UI
        info = result.get("resp") or {"error": result.get("error")}
        return False, info

    resp = result["resp"]
    # Parse the typical response
    try:
        if "candidates" in resp and resp["candidates"]:
            part = resp["candidates"][0]["content"]["parts"][0].get("text")
            return True, part
        else:
            return False, resp
    except Exception as e:
        return False, {"error": f"parsing_error: {e}", "raw": resp}

# System prompts (Thai)
PREDICTION_SYSTEM_PROMPT = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÇ‡∏´‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πì ‡∏†‡∏û" (H≈çracharn Sam Phop) ‚Äî ‡∏ô‡∏±‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå 3 ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏° (‡πÑ‡∏ó‡∏¢, ‡∏™‡∏≤‡∏Å‡∏•, ‡∏à‡∏µ‡∏ô).
‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à"""

QUESTION_SYSTEM_PROMPT = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÇ‡∏´‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πì ‡∏†‡∏û" ‚Äî ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô/‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"""

# UI: choose mode
mode = st.radio("‡πÇ‡∏´‡∏°‡∏î:", ["üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡∏ß‡∏á"])

if mode.startswith("üîÆ"):
    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    timeframe = st.selectbox("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:", ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ"])
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠:")
    dob = st.text_input("‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î (‡πÄ‡∏ä‡πà‡∏ô 14 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2530):")
    tob = st.text_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'):", value="‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")

    if st.button("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"):
        if not name.strip() or not dob.strip():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            user_query = f"‡∏ä‡∏∑‡πà‡∏≠: {name}\n‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {dob}\n‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î: {tob}\n‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {timeframe}"
            prompt = f"""‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢ ‡∏™‡∏≤‡∏Å‡∏• ‡πÅ‡∏•‡∏∞‡∏à‡∏µ‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏™‡πà‡∏ß‡∏ô:\n\nüåü ‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:\n‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:\nüçÄ ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á:\nüí° ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:\n{user_query}"""
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Gemini... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                ok, resp = call_gemini(prompt, PREDICTION_SYSTEM_PROMPT)
                if ok:
                    st.success("‚ú® ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
                    st.markdown(resp)
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Gemini ‡πÑ‡∏î‡πâ")
                    st.write("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug:")
                    st.json(resp)

else:
    st.subheader("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡∏ß‡∏á")
    question = st.text_area("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:")
    if st.button("üîç ‡∏ñ‡∏≤‡∏°‡πÇ‡∏´‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå"):
        if not question.strip():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô")
        else:
            prompt = f"{question}\n\n‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå"
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Gemini... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                ok, resp = call_gemini(prompt, QUESTION_SYSTEM_PROMPT)
                if ok:
                    st.success("üí´ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:")
                    st.markdown(resp)
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Gemini ‡πÑ‡∏î‡πâ")
                    st.write("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug:")
                    st.json(resp)
